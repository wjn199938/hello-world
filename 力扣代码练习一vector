c++ vector的用法 vector 是向量类型，它可以容纳许多类型的数据，如若干个整数，所以称其为容器。
                vector 是C++ STL的一个重要成员，使用它时需要包含头文件：#include<vector>;
                
                a. vector的初始化
                vector<int> a(10); //定义了10个整型元素的向量（尖括号中为元素类型名，它可以是任何合法的数据类型）
                vector<int> a(10,1); //定义了10个整型元素的向量,且给出每个元素的初值为1
                vector<int> a(b); //用b向量来创建a向量，整体复制性赋值
                vector<int> a(b.begin(),b.begin+3); //定义了a值为b中第0个到第2个（共3个）元素
                int b[7]={1,2,3,4,5,9,8};
                vector<int> a(b,b+7); //从数组中获得初值
               
                b. vector对象的几个重要操作
                （1）a.assign(b.begin(), b.begin()+3); //b为向量，将b的0~2个元素构成的向量赋给a
                （2）a.assign(4,2); //是a只含4个元素，且每个元素为2
                （3）a.back(); //返回a的最后一个元素
                （4）a.front(); //返回a的第一个元素
                （5）a[i]; //返回a的第i个元素，当且仅当a[i]存在
                （6）a.clear(); //清空a中的元素
                （7）a.empty(); //判断a是否为空，空则返回ture,不空则返回false
                （8）a.pop_back(); //删除a向量的最后一个元素
                （9）a.erase(a.begin()+1,a.begin()+3); //删除a中第1个（从第0个算起）到第2个元素，也就是说删除的元素从a.begin()+1算起（包括它）一直到a.begin()+3（不包括它）
                （10）a.push_back(5); //在a的最后一个向量后插入一个元素，其值为5
                （11）a.insert(a.begin()+1,5); //在a的第1个元素（从第0个算起）的位置插入数值5，如a为1,2,3,4，插入元素后为1,5,2,3,4
                （12）a.insert(a.begin()+1,3,5); //在a的第1个元素（从第0个算起）的位置插入3个数，其值都为5
                （13）a.insert(a.begin()+1,b+3,b+6); //b为数组，在a的第1个元素（从第0个算起）的位置插入b的第3个元素到第5个元素（不包括b+6），如b为1,2,3,4,5,9,8，插入元素后为1,4,5,9,2,3,4,5,9,8
                （14）a.size(); //返回a中元素的个数；
                （15）a.capacity(); //返回a在内存中总共可以容纳的元素个数
                （16）a.resize(10); //将a的现有元素个数调至10个，多则删，少则补，其值随机
                （17）a.resize(10,2); //将a的现有元素个数调至10个，多则删，少则补，其值为2 
                （18）a.swap(b); //b为向量，将a中的元素和b中的元素进行整体性交换
                （19）a==b; //b为向量，向量的比较操作还有!=,>=,<=,>,<
example：               
若想定义A = [[0,1,2],[3,4,5]]
vector<vector<int> > A;//注意第二个尖括号前有个空格
//A.push_back里必须是vector
vector<int> B;
B.push_back(0);
B.push_back(1);
B.push_back(2);
A.push_back(B);
B.clear();
B.push_back(3);
B.push_back(4);
B.push_back(5);
A.push_back(B);
